Class 1
--------
- Never talk about core data types (int/float/str/bool)
- There's no time for command line lesson
- We need to have in time class for installation. This is not easy, and it's irresponsible to make students do this on their own time as there is considerable risk in command line operations.
- Bug in homework, spells HELLO WJRLD
- Homework is confusing. It doesn't spell any words, it just prints numbers, but the "hello world" aspect is forced in there. I'd rethink this completely.

Class 2
--------
- Truth tables are really confusing, should change the ordering here/add more resources.
- No time to go over homework or answer any questions. I ended up not able to do the Lists lesson.
- REPL.it on 06-lists-slides.md.html#/we-do-lists is the wrong code
- `max()` and `min()` are said to only work on lists with numbers, which is false
- We're introducing functions, but referring to them as operators (sum/min/max/len/insert/pop).
- We've also never discussed what a function is, or a return type.
  - It's technically ok to do this, as long as you give the instructors time to go over these concepts. Otherwise people will just be confused. With the ultra-rigid timing, there's just no space for injecting meaningful conversation around these concepts.

Class 3
-------
loops
- not knowing the number of times we want to iterate isn't a meaningful explanation for use of `range(x)`, as we need an x.
- range(x) does not return a list of integers, rather a generator. It is misleading to tell the students otherwise.

functions
- Improper use of 'callbacks'
- fizzbuzz uses paramters before we introduce the concept

Class 4
------

lab
- Tons of anti-patterns here. "search_or_ratings" is a terrible function name, directly violates the Single Responsibility Principal.
- Seems to be little reasoning behind which variables are global and which are local.
- What is this magic number that determines how our code works?
- Why are we doing all of this? There's no idication of what the final product will do, so students don't understand why they're doing these steps now.
- Instructions are too specific.

args
- Didn't teach this. Needed to make more time to go over more relevant info. These concepts are unnecessary for students at this stage in their edevelopment, and are prone to being misused. It's too risky to teach this at this point. Instead, I covered dictionaries. Looking back I wish I'd done tuples and sets first, but either would be fine.

dicts
- Not bad but most of the slides were just bleh, I think this is something that is easier to teach by just doing examples in repl.it, writing some key concepts on the board, and pasting the code in slack so students can keep it

tuples + sets
- Something problematic I've seen in the entire class, naming variables after the type they are. This is unstructured and in many cases redundant. For example, "subscribed_emails_list" should just be "subscribed emails"
- 'We Do: Tuples' repl.it throws 404
- We keep referencing tuples as a "kind of list" and lists as "regular lists". This is improperly conflating the concept of lists and collection, and treating sets/tuples as some sort of second class list. We should instead be referring to each as different types of collections.



Class 5:
-------
1. Review Lab 2
2. Sets + Tuples
3. Intermediate Vars

Class 6:
------
1. Review Homework
2. Classes
3. Lab 3


Week 5:
------
- Lab 4 gets axed because it's useless
- Pushing "code abstraction", aka itertools and comprehensions, because why are we doing this now

````
